function getValueFromCookie(e){var s,t,r,a=document.cookie.split(";");for(s=0;s<a.length;s++)if(t=a[s].substr(0,a[s].indexOf("=")),r=a[s].substr(a[s].indexOf("=")+1),t=t.replace(/^\s+|\s+$/g,""),t==e)return unescape(r)}var queries={coverage:"SELECT ApexClassOrTrigger.Name, NumLinesCovered, NumLinesUncovered FROM ApexCodeCoverageAggregate order by ApexClassOrTrigger.Name ASC",orgWideCoverage:"SELECT PercentCovered FROM ApexOrgWideCoverage",apexClasses:"SELECT Id, SymbolTable, IsValid FROM ApexClass where Status='Active' order by Name",InvalidApexClasses:"SELECT Id, Name FROM ApexClass where IsValid=false order by Name",ApexTestRunResult:"SELECT Id from ApexTestRunResult order by EndTime DESC LIMIT 1",ApexTestResult:"SELECT ApexTestRunResultId, RunTime, StackTrace, Message, MethodName, ApexClass.Name, Outcome, TestTimestamp FROM ApexTestResult where Outcome='Fail' AND ApexTestRunResultId='#runresultid'"};function createRequest(e,s,t,r){var a;request=new XMLHttpRequest,"query"===r?a="/services/data/v41.0/tooling/query/?q="+encodeURIComponent(e):"runAll"===r?a="/services/data/v41.0/tooling/runTestsAsynchronous":"soapQuery"===r&&(a="/services/data/v41.0/query?q="+encodeURIComponent(e)),request.open(t,a,!0);var n=getValueFromCookie("sid");request.setRequestHeader("Authorization","Bearer "+n),request.onreadystatechange=s}function coverageCallback(){if(0===request.readyState||4===request.readyState){var e=JSON.parse(request.responseText).records,s={type:"coverage"},t={},r=[];result={coverage:e};for(data in result.coverage)(t={}).Name=result.coverage[data].ApexClassOrTrigger.Name,t.Lines_Covered=result.coverage[data].NumLinesCovered,t.Lines_Uncovered=result.coverage[data].NumLinesUncovered,calculateCoverage(t),r.push(t);s.csvJSON=r,s.csvFields=["Name","Lines_Covered","Lines_Uncovered","Coverage"],console.log(s),chrome.runtime.sendMessage(s)}}function orgWideCoverageCallback(){if(0===request.readyState||4===request.readyState){var e=JSON.parse(request.responseText).records,s={type:"orgWideCoverage",records:e};console.log(e),chrome.runtime.sendMessage(s)}}function getLatestTestRunCallback(){if(0===request.readyState||4===request.readyState){var e=JSON.parse(request.responseText).records,s=queries.ApexTestResult;createRequest(s=s.replace("#runresultid",e[0].Id),getLatestTestMethodResultsCallback,"GET","query"),request.send()}}function getLatestTestMethodResultsCallback(){if(0===request.readyState||4===request.readyState){var e=JSON.parse(request.responseText).records;console.log(e);var s={type:"getTestResults",testResults:e};chrome.runtime.sendMessage(s)}}function runSelectedCallback(){chrome.runtime.sendMessage({text:"Selected tests are queued!",type:"successAcknowledgement"})}function runAllTestsCallback(){chrome.runtime.sendMessage({text:"All tests are queued!",type:"successAcknowledgement"})}function getInvalidApexClassesCallback(){if(0===request.readyState||4===request.readyState){var e={type:"getInvalidApexClasses",records:JSON.parse(request.responseText).records};chrome.runtime.sendMessage(e)}}function getAllClasses(){if(0===request.readyState||4===request.readyState){var e=JSON.parse(request.responseText).records;console.log(e);var s={type:"getTestClasses",records:e};chrome.runtime.sendMessage(s)}}function getCodeCoverage(){createRequest(queries.coverage,coverageCallback,"GET","query"),request.send()}function getOrgWideCoverage(){createRequest(queries.orgWideCoverage,orgWideCoverageCallback,"GET","query"),request.send()}function runAllTests(){createRequest(null,runAllTestsCallback,"POST","runAll");request.setRequestHeader("Content-Type","application/json;charset=UTF-8"),request.send(JSON.stringify({testLevel:"RunLocalTests"}))}function getTestClasses(){createRequest(queries.apexClasses,getAllClasses,"GET","query"),request.send()}function runSelected(e){createRequest(null,runSelectedCallback,"POST","runAll");var s=[],t={};for(index in e)(t={}).classId=e[index],s.push(t);var r={tests:s};console.log(JSON.stringify(r)),request.setRequestHeader("Content-Type","application/json;charset=UTF-8"),request.send(JSON.stringify(r))}request={},result={};var standardPages={ApexTestQueuePage:"/ui/setup/apex/ApexTestQueuePage",DevConsole:"/_ui/common/apex/debug/ApexCSIPage"};function openStandardPage(e){window.open(standardPages[e.page],"_blank","")}function getTestResults(){createRequest(queries.ApexTestRunResult,getLatestTestRunCallback,"GET","query"),request.send()}function saveFile(e){console.log(e);var s=e.file,t=new File([s],e.name+".csv",{type:"text/plain;charset=utf-8"});saveAs(t)}function getInvalidApexClasses(){createRequest(queries.InvalidApexClasses,getInvalidApexClassesCallback,"GET","soapQuery"),request.send()}function openTestClass(e){window.open("/"+e.id,"_blank","")}function executeMethod(e){switch(e.execute){case"getCodeCoverage":getCodeCoverage();break;case"getOrgWideCoverage":getOrgWideCoverage();break;case"runAllTests":runAllTests();break;case"getTestClasses":getTestClasses();break;case"runSelected":runSelected(e.selectedTests);break;case"openStandardPage":openStandardPage(e);break;case"getTestResults":getTestResults();break;case"saveFile":saveFile(e);break;case"getInvalidApexClasses":getInvalidApexClasses(e);break;case"openTestClass":openTestClass(e)}}function calculateCoverage(e){0!=e.coveredLines&&0!=e.unCoveredLines?e.Coverage=result.coverage[data].NumLinesCovered/(result.coverage[data].NumLinesUncovered+result.coverage[data].NumLinesCovered)*100:e.Coverage=0,e.Coverage=round(e.Coverage,2),(void 0==e.Coverage||null==e.Coverage||isNaN(e.Coverage))&&(e.Coverage=0)}function round(e,s){return Number(Math.round(e+"e"+s)+"e-"+s)}chrome.runtime.onMessage.addListener(function(e,s,t){executeMethod(e)});